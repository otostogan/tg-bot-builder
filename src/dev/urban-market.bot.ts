import {
    IBotBuilderContext,
    IBotBuilderOptions,
    IBotPage,
    IBotPageMiddlewareConfig,
    IBotSessionState,
} from '../';
import * as yup from 'yup';

type TContactValue = {
    phone_number?: string;
    first_name?: string;
    last_name?: string;
};

interface IUrbanMarketProfile {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    address?: string;
}

interface IUrbanMarketRegistrationState {
    completed?: boolean;
    registeredAt?: string;
}

interface IUrbanMarketSession extends IBotSessionState {
    profile?: IUrbanMarketProfile;
    registration?: IUrbanMarketRegistrationState;
    cart?: string[];
    lastOrderNumber?: string;
}

interface ICategory {
    id: string;
    title: string;
    description: string;
    mood?: string;
}

interface IProduct {
    id: string;
    categoryId: string;
    title: string;
    description: string;
    price: number;
    tastingNotes: string[];
}

class UrbanMarketCatalogService {
    private readonly categories: ICategory[] = [
        {
            id: 'tea',
            title: '–ê—Ä–æ–º–∞—Ç–Ω—ã–µ —á–∞–∏',
            description:
                '–ü–æ–¥–±–æ—Ä–∫–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —É–ª—É–Ω–æ–≤ –∏ —Ç—Ä–∞–≤—è–Ω—ã—Ö —Å–º–µ—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥—Ä–µ—é—Ç –∏ –Ω–∞–ø–æ–ª–Ω—è—Ç –∞—Ä–æ–º–∞—Ç–∞–º–∏ –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ—Ä–∞–Ω–∂–µ—Ä–µ–∏.',
            mood: 'üåø',
        },
        {
            id: 'dessert',
            title: '–î–µ—Å–µ—Ä—Ç—ã –±–µ–∑ —Å–ø–µ—à–∫–∏',
            description:
                '–î–æ–º–∞—à–Ω–∏–µ —Ç–∞—Ä—Ç—ã –∏ –¥–µ—Å–µ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–µ—á—ë–º –º–∞–ª—ã–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏ –∫ –∫–∞–∂–¥–æ–º—É –≤–µ—á–µ—Ä—É –¥–µ–≥—É—Å—Ç–∞—Ü–∏–π.',
            mood: 'üç∞',
        },
    ];

    private readonly products: IProduct[] = [
        {
            id: 'tea-mango-oolong',
            categoryId: 'tea',
            title: '–ú–∞–Ω–≥–æ–≤—ã–π —É–ª—É–Ω ¬´–õ–µ—Ç–Ω–∏–π –±–∞–ª–∫–æ–Ω¬ª',
            description:
                '–õ—ë–≥–∫–∏–π —Ñ–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–ª—É–Ω —Å –∫—É—Å–æ—á–∫–∞–º–∏ —Å—É—à—ë–Ω–æ–≥–æ –º–∞–Ω–≥–æ –∏ –ª–µ–ø–µ—Å—Ç–∫–∞–º–∏ –∫–∞–ª–µ–Ω–¥—É–ª—ã.',
            price: 790,
            tastingNotes: [
                '—Å–ª–∞–¥–æ—Å—Ç—å –º–∞–Ω–≥–æ',
                '—Ñ–ª—ë—Ä —Ü–∏—Ç—Ä—É—Å–æ–≤–æ–π –∫–æ—Ä–∫–∏',
                '–º—è–≥–∫–æ–µ —Å–ª–∏–≤–æ—á–Ω–æ–µ –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ',
            ],
        },
        {
            id: 'tea-bergamot-green',
            categoryId: 'tea',
            title: '–ó–µ–ª—ë–Ω—ã–π —á–∞–π —Å –±–µ—Ä–≥–∞–º–æ—Ç–æ–º ¬´–õ–∞–º–ø–∞ –≠–¥–∏—Å–æ–Ω–∞¬ª',
            description:
                '–ë–æ–¥—Ä—è—â–∏–π –∫—É–ø–∞–∂ —Å–µ–Ω—á–∏ –∏ –∂—ë–ª—Ç–æ–≥–æ —á–∞—è —Å —ç—Ñ–∏—Ä–Ω—ã–º–∏ –º–∞—Å–ª–∞–º–∏ –±–µ—Ä–≥–∞–º–æ—Ç–∞ –∏ –≤–∞—Å–∏–ª—å–∫–∞.',
            price: 640,
            tastingNotes: [
                '–ø—Ä—è–Ω—ã–π —Ü–∏—Ç—Ä—É—Å',
                '–ª—ë–≥–∫–∞—è —Ç–µ—Ä–ø–∫–æ—Å—Ç—å',
                '–¥–æ–ª–≥–∏–π –º–µ–¥–æ–≤—ã–π —à–ª–µ–π—Ñ',
            ],
        },
        {
            id: 'dessert-lavender-tart',
            categoryId: 'dessert',
            title: '–õ–∞–≤–∞–Ω–¥–æ–≤—ã–π —Ç–∞—Ä—Ç —Å –≥–æ–ª—É–±–∏–∫–æ–π',
            description:
                '–†–∞—Å—Å—ã–ø—á–∞—Ç–æ–µ —Ç–µ—Å—Ç–æ, –∑–∞–≤–∞—Ä–Ω–æ–π –∫—Ä–µ–º —Å –∏–Ω—Ñ—É–∑–∏–µ–π –ª–∞–≤–∞–Ω–¥—ã –∏ —Å–≤–µ–∂–∞—è –≥–æ–ª—É–±–∏–∫–∞.',
            price: 420,
            tastingNotes: ['–ª–∞–≤–∞–Ω–¥–∞', '—Å–ª–∏–≤–∫–∏', '—è–≥–æ–¥–Ω–∞—è —Å–≤–µ–∂–µ—Å—Ç—å'],
        },
        {
            id: 'dessert-salted-caramel',
            categoryId: 'dessert',
            title: '–ú–∏–Ω–∏-—á–∏–∑–∫–µ–π–∫ —Å —Å–æ–ª—ë–Ω–æ–π –∫–∞—Ä–∞–º–µ–ª—å—é',
            description:
                '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–∏–∑–∫–µ–π–∫ –ù—å—é-–ô–æ—Ä–∫ –≤ –º–∏–Ω–∏-—Ñ–æ—Ä–º–∞—Ç–µ —Å –¥–æ–º–∞—à–Ω–µ–π –∫–∞—Ä–∞–º–µ–ª—å—é.',
            price: 360,
            tastingNotes: [
                '—Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä',
                '—Å–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å',
                '—Ö—Ä—É—Å—Ç –ø–µ—á–µ–Ω—å—è',
            ],
        },
    ];

    public listCategories(): ICategory[] {
        return [...this.categories];
    }

    public getCategory(categoryId: string): ICategory | undefined {
        return this.categories.find((category) => category.id === categoryId);
    }

    public listProductsByCategory(categoryId: string): IProduct[] {
        return this.products.filter(
            (product) => product.categoryId === categoryId,
        );
    }

    public getProduct(productId: string): IProduct | undefined {
        return this.products.find((product) => product.id === productId);
    }

    public formatProductCard(product: IProduct): string {
        const notes = product.tastingNotes
            .map((note) => `‚Ä¢ ${note}`)
            .join('\n');

        return [
            `*${product.title}* ‚Äî ${product.price} ‚ÇΩ`,
            '',
            product.description,
            '',
            '–ù–æ—Ç—ã –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏:',
            notes,
        ]
            .filter(Boolean)
            .join('\n');
    }
}

const BUTTONS = {
    openCatalog: 'üì¶ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥',
    editProfile: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
    mainMenu: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    backToCategories: '‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
    backToCategory: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    openCart: 'üß∫ –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
    addToCart: 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
    viewProfile: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
    viewCatalog: 'üè¨ –ö–∞—Ç–∞–ª–æ–≥',
    viewCart: 'üß∫ –ö–æ—Ä–∑–∏–Ω–∞',
    support: 'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
    reset: 'üîÑ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ',
    confirmReset: '–î–∞, —Å—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ',
    cancelReset: '–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å',
    checkout: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
    clearCart: 'üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
};

const catalogService = new UrbanMarketCatalogService();

const ensureSession = (context: IBotBuilderContext): IUrbanMarketSession => {
    if (!context.session) {
        context.session = {};
    }

    return context.session as IUrbanMarketSession;
};

const getProfile = (context: IBotBuilderContext): IUrbanMarketProfile => {
    const session = ensureSession(context);
    session.profile = session.profile ?? {};
    return session.profile;
};

const isRegistrationCompleted = (session?: IUrbanMarketSession): boolean =>
    Boolean(session?.registration?.completed);

const formatProfileSummary = (profile: IUrbanMarketProfile): string => {
    const rows = [
        `–ò–º—è: ${profile.firstName ?? '‚Äî'}`,
        `–§–∞–º–∏–ª–∏—è: ${profile.lastName ?? '‚Äî'}`,
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${profile.phone ?? '‚Äî'}`,
        `–ü–æ—á—Ç–∞: ${profile.email ?? '‚Äî'}`,
        `–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${profile.address ?? '‚Äî'}`,
    ];

    return rows.join('\n');
};

const normalizePhoneValue = (value: unknown): string | undefined => {
    if (!value) {
        return undefined;
    }

    if (typeof value === 'string') {
        return value.trim();
    }

    if (typeof value === 'object' && value !== null) {
        const contact = value as TContactValue;
        if (typeof contact.phone_number === 'string') {
            return contact.phone_number.trim();
        }
    }

    return undefined;
};

const requireRegistrationMiddleware: IBotPageMiddlewareConfig = {
    name: 'require-registration',
    priority: 100,
    handler: (context) => {
        const session = context.session as IUrbanMarketSession | undefined;
        if (!isRegistrationCompleted(session)) {
            return {
                allow: false,
                message:
                    '–ú—ã –µ—â—ë –Ω–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å. –û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥.',
            };
        }

        return { allow: true };
    },
};

const registrationPages: IBotPage[] = [
    {
        id: 'first-name',
        content:
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π –º–∞—Ä–∫–µ—Ç Urban Greenhouse!\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–µ–º—É.',
        yup: yup
            .string()
            .trim()
            .min(2, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.')
            .max(30, '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤.')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è.'),
        onValid: (context) => {
            const profile = getProfile(context);
            const value = String(context.session?.['first-name'] ?? '').trim();
            profile.firstName = value;
        },
        next: () => 'last-name',
    },
    {
        id: 'last-name',
        content:
            '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é ‚Äî –∫—É—Ä—å–µ—Ä—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ —Ç–∞–∫.',
        yup: yup
            .string()
            .trim()
            .min(2, '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.')
            .max(40, '–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤.')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.'),
        onValid: (context) => {
            const profile = getProfile(context);
            const value = String(context.session?.['last-name'] ?? '').trim();
            profile.lastName = value;
        },
        next: () => 'email',
    },
    {
        id: 'email',
        content:
            '–£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —á–µ–∫–∏ –∏ –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–æ–≤–∏–Ω–æ–∫.',
        yup: yup
            .string()
            .trim()
            .email('–ü–æ—Ö–æ–∂–µ, –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —É–∫–∞–∑–∞–Ω —Å –æ—à–∏–±–∫–æ–π.')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.'),
        onValid: (context) => {
            const profile = getProfile(context);
            const value = String(context.session?.email ?? '').trim();
            profile.email = value;
        },
        next: () => 'phone',
    },
    {
        id: 'phone',
        content:
            '‚òéÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª.',
        validate: (value) => {
            if (typeof value === 'string') {
                return /^\+?\d[\d\s\-()]{7,}$/.test(value.trim());
            }

            if (value && typeof value === 'object' && 'phone_number' in value) {
                return true;
            }

            return false;
        },
        onValid: (context) => {
            const profile = getProfile(context);
            const rawValue = context.session?.phone;
            const normalized = normalizePhoneValue(rawValue);
            profile.phone = normalized;
        },
        next: () => 'address',
    },
    {
        id: 'address',
        content:
            'üèôÔ∏è –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–∫—É–ø–∫–∏? –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Å –≥–æ—Ä–æ–¥–æ–º, —É–ª–∏—Ü–µ–π –∏ –¥–æ–º–æ–º, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.',
        yup: yup
            .string()
            .trim()
            .min(
                10,
                '–û–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã –∫—É—Ä—å–µ—Ä —Ç–æ—á–Ω–æ –Ω–∞—à—ë–ª –≤–∞—Å.',
            )
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.'),
        onValid: (context) => {
            const profile = getProfile(context);
            const value = String(context.session?.address ?? '').trim();
            profile.address = value;
        },
        next: () => 'registration-summary',
    },
    {
        id: 'registration-summary',
        content: (context) => {
            const session = ensureSession(context);
            const profile = getProfile(context);
            const summary = formatProfileSummary(profile);
            const greeting = profile.firstName
                ? `–°–ø–∞—Å–∏–±–æ, ${profile.firstName}!`
                : '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!';

            const registeredAt = session.registration?.registeredAt
                ? new Date(session.registration.registeredAt).toLocaleString(
                      'ru-RU',
                      {
                          hour: '2-digit',
                          minute: '2-digit',
                          day: '2-digit',
                          month: 'long',
                      },
                  )
                : null;

            const history = registeredAt
                ? `\n\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ${registeredAt}.`
                : '';

            return {
                text: [
                    '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                    greeting,
                    '',
                    summary,
                    history,
                    '',
                    '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.',
                ]
                    .filter(Boolean)
                    .join('\n'),
                options: { parse_mode: 'Markdown' },
            };
        },
        validate: (value) =>
            typeof value === 'string' &&
            [BUTTONS.openCatalog, BUTTONS.editProfile].includes(value.trim()),
        onValid: (context) => {
            const session = ensureSession(context);
            const answer = String(
                context.session?.['registration-summary'] ?? '',
            ).trim();

            if (answer === BUTTONS.openCatalog) {
                session.registration = {
                    completed: true,
                    registeredAt: new Date().toISOString(),
                };
            }

            if (answer === BUTTONS.editProfile) {
                session.registration = { completed: false };
                session.cart = [];

                delete session['first-name'];
                delete session['last-name'];
                delete session.email;
                delete session.phone;
                delete session.address;

                if (session.profile) {
                    session.profile = {};
                }
            }
        },
        next: (context) => {
            const answer = String(
                context.session?.['registration-summary'] ?? '',
            ).trim();
            return answer === BUTTONS.editProfile ? 'first-name' : 'main-menu';
        },
    },
];

const catalogPages: IBotPage[] = [
    {
        id: 'main-menu',
        content: (context) => {
            const session = ensureSession(context);
            const profile = session.profile ?? {};
            const name = profile.firstName ?? '–¥—Ä—É–≥';
            const cartSize = session.cart?.length ?? 0;
            const cartLine =
                cartSize > 0
                    ? `\nüß∫ –í –∫–æ—Ä–∑–∏–Ω–µ ${cartSize} –ø–æ–∑–∏—Ü–∏${cartSize === 1 ? '—è' : '–∏'}.`
                    : '';

            return {
                text: [
                    `üå± –°–Ω–æ–≤–∞ —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, ${name}!`,
                    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å.',
                    cartLine,
                ]
                    .filter(Boolean)
                    .join('\n\n'),
            };
        },
        validate: (value) =>
            typeof value === 'string' &&
            [
                BUTTONS.viewCatalog,
                BUTTONS.viewProfile,
                BUTTONS.viewCart,
                BUTTONS.support,
                BUTTONS.reset,
            ].includes(value.trim()),
        onValid: (context) => {
            const session = ensureSession(context);
            const answer = String(context.session?.['main-menu'] ?? '').trim();

            if (answer === BUTTONS.reset) {
                session.lastOrderNumber = undefined;
            }
        },
        next: (context) => {
            const answer = String(context.session?.['main-menu'] ?? '').trim();
            switch (answer) {
                case BUTTONS.viewCatalog:
                    return 'catalog-categories';
                case BUTTONS.viewProfile:
                    return 'profile-overview';
                case BUTTONS.viewCart:
                    return 'cart-overview';
                case BUTTONS.support:
                    return 'support';
                case BUTTONS.reset:
                    return 'reset-confirm';
                default:
                    return 'main-menu';
            }
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'catalog-categories',
        content: (context) => {
            const categories = catalogService.listCategories();
            const lines = categories.map(
                (category) =>
                    `${category.mood ?? '‚Ä¢'} *${category.title}* ‚Äî ${category.description}`,
            );

            return {
                text: [
                    'üè¨ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ Urban Greenhouse:',
                    '',
                    ...lines,
                    '',
                    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏.',
                ].join('\n'),
                options: { parse_mode: 'Markdown' },
            };
        },
        validate: (value) => {
            if (typeof value !== 'string') {
                return false;
            }

            const normalized = value.trim();
            if (normalized === BUTTONS.mainMenu) {
                return true;
            }

            const categories = catalogService.listCategories();
            return categories.some((category) => category.title === normalized);
        },
        next: (context) => {
            const answer = String(
                context.session?.['catalog-categories'] ?? '',
            ).trim();
            if (answer === BUTTONS.mainMenu) {
                return 'main-menu';
            }

            const category = catalogService
                .listCategories()
                .find((item) => item.title === answer);

            if (!category) {
                return 'catalog-categories';
            }

            return `catalog-${category.id}`;
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'catalog-tea',
        content: () => {
            const products = catalogService.listProductsByCategory('tea');
            const lines = products.map(
                (product) => `‚Ä¢ ${product.title} ‚Äî ${product.price} ‚ÇΩ`,
            );

            return {
                text: [
                    'üåø –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —á–∞–∏:',
                    ...lines,
                    '',
                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.',
                ].join('\n'),
            };
        },
        validate: (value) => {
            if (typeof value !== 'string') {
                return false;
            }

            const normalized = value.trim();
            if (
                [BUTTONS.mainMenu, BUTTONS.backToCategories].includes(
                    normalized,
                )
            ) {
                return true;
            }

            const products = catalogService.listProductsByCategory('tea');
            return products.some((product) => product.title === normalized);
        },
        next: (context) => {
            const answer = String(
                context.session?.['catalog-tea'] ?? '',
            ).trim();
            if (answer === BUTTONS.mainMenu) {
                return 'main-menu';
            }

            if (answer === BUTTONS.backToCategories) {
                return 'catalog-categories';
            }

            const product = catalogService
                .listProductsByCategory('tea')
                .find((item) => item.title === answer);

            if (!product) {
                return 'catalog-tea';
            }

            return `product-${product.id}`;
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'catalog-dessert',
        content: () => {
            const products = catalogService.listProductsByCategory('dessert');
            const lines = products.map(
                (product) => `‚Ä¢ ${product.title} ‚Äî ${product.price} ‚ÇΩ`,
            );

            return {
                text: [
                    'üç∞ –î–µ—Å–µ—Ä—Ç—ã –¥–Ω—è:',
                    ...lines,
                    '',
                    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Å–µ—Ä—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.',
                ].join('\n'),
            };
        },
        validate: (value) => {
            if (typeof value !== 'string') {
                return false;
            }

            const normalized = value.trim();
            if (
                [BUTTONS.mainMenu, BUTTONS.backToCategories].includes(
                    normalized,
                )
            ) {
                return true;
            }

            const products = catalogService.listProductsByCategory('dessert');
            return products.some((product) => product.title === normalized);
        },
        next: (context) => {
            const answer = String(
                context.session?.['catalog-dessert'] ?? '',
            ).trim();
            if (answer === BUTTONS.mainMenu) {
                return 'main-menu';
            }

            if (answer === BUTTONS.backToCategories) {
                return 'catalog-categories';
            }

            const product = catalogService
                .listProductsByCategory('dessert')
                .find((item) => item.title === answer);

            if (!product) {
                return 'catalog-dessert';
            }

            return `product-${product.id}`;
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'cart-overview',
        content: (context) => {
            const session = ensureSession(context);
            const cart = session.cart ?? [];

            if (cart.length === 0) {
                return {
                    text: 'üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, –∏ –º—ã —Å—Ä–∞–∑—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∑–∞–∫–∞–∑.',
                };
            }

            const items = cart
                .map((productId, index) => {
                    const product = catalogService.getProduct(productId);
                    if (!product) {
                        return null;
                    }

                    return `${index + 1}. ${product.title} ‚Äî ${product.price} ‚ÇΩ`;
                })
                .filter(Boolean) as string[];

            const total = cart.reduce((sum, productId) => {
                const product = catalogService.getProduct(productId);
                return product ? sum + product.price : sum;
            }, 0);

            return {
                text: [
                    'üß∫ –í –∫–æ—Ä–∑–∏–Ω–µ:',
                    ...items,
                    '',
                    `–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${total} ‚ÇΩ`,
                    '',
                    '–ú–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º.',
                ].join('\n'),
            };
        },
        validate: (value) =>
            typeof value === 'string' &&
            [BUTTONS.mainMenu, BUTTONS.clearCart, BUTTONS.checkout].includes(
                value.trim(),
            ),
        onValid: (context) => {
            const session = ensureSession(context);
            const answer = String(
                context.session?.['cart-overview'] ?? '',
            ).trim();

            if (answer === BUTTONS.clearCart) {
                session.cart = [];
            }

            if (
                answer === BUTTONS.checkout &&
                (!session.cart || session.cart.length === 0)
            ) {
                context.bot.sendMessage(
                    context.chatId,
                    '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.',
                );
            }
        },
        next: (context) => {
            const answer = String(
                context.session?.['cart-overview'] ?? '',
            ).trim();

            if (answer === BUTTONS.clearCart) {
                return 'cart-overview';
            }

            if (answer === BUTTONS.checkout) {
                const session = ensureSession(context);
                if (!session.cart || session.cart.length === 0) {
                    return 'cart-overview';
                }

                const orderNumber = `UG-${Date.now().toString().slice(-6)}`;
                session.lastOrderNumber = orderNumber;
                session.cart = [];
                return 'order-confirmation';
            }

            return 'main-menu';
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'order-confirmation',
        content: (context) => {
            const session = ensureSession(context);
            const profile = session.profile ?? {};
            const orderNumber =
                session.lastOrderNumber ??
                `UG-${Date.now().toString().slice(-6)}`;

            return {
                text: [
                    'üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
                    `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *${orderNumber}*`,
                    '',
                    `–ú—ã –ø–æ–∑–≤–æ–Ω–∏–º –ø–æ –Ω–æ–º–µ—Ä—É ${profile.phone ?? '‚Äî'} –∏ —É—Ç–æ—á–Ω–∏–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.`,
                    `–û—Ç–ø—Ä–∞–≤–∏–º –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É: ${profile.address ?? '‚Äî'}.`,
                    '',
                    '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?',
                ].join('\n'),
                options: { parse_mode: 'Markdown' },
            };
        },
        validate: (value) =>
            typeof value === 'string' &&
            [BUTTONS.mainMenu, BUTTONS.viewCatalog].includes(value.trim()),
        next: (context) => {
            const answer = String(
                context.session?.['order-confirmation'] ?? '',
            ).trim();
            if (answer === BUTTONS.viewCatalog) {
                return 'catalog-categories';
            }

            return 'main-menu';
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'profile-overview',
        content: (context) => {
            const session = ensureSession(context);
            const profile = session.profile ?? {};
            const summary = formatProfileSummary(profile);

            return {
                text: [
                    'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å Urban Greenhouse:',
                    '',
                    summary,
                    '',
                    '–ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                ].join('\n'),
            };
        },
        validate: (value) =>
            typeof value === 'string' &&
            [BUTTONS.mainMenu, BUTTONS.editProfile, BUTTONS.reset].includes(
                value.trim(),
            ),
        next: (context) => {
            const answer = String(
                context.session?.['profile-overview'] ?? '',
            ).trim();
            if (answer === BUTTONS.editProfile) {
                return 'address-update';
            }

            if (answer === BUTTONS.reset) {
                return 'reset-confirm';
            }

            return 'main-menu';
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'address-update',
        content:
            '‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. –ú—ã —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.',
        yup: yup
            .string()
            .trim()
            .min(
                10,
                '–û–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã –∫—É—Ä—å–µ—Ä —Ç–æ—á–Ω–æ –Ω–∞—à—ë–ª –≤–∞—Å.',
            )
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å.'),
        onValid: (context) => {
            const session = ensureSession(context);
            const value = String(
                context.session?.['address-update'] ?? '',
            ).trim();
            const profile = session.profile ?? {};
            profile.address = value;
            session.profile = profile;
            session.address = value;
        },
        next: () => 'profile-overview',
        middlewares: ['require-registration'],
    },
    {
        id: 'support',
        content: (context) => {
            const session = ensureSession(context);
            const profile = session.profile ?? {};

            return {
                text: [
                    'üõü –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Urban Greenhouse',
                    '',
                    '–ú—ã –Ω–∞ —Å–≤—è–∑–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 22:00.',
                    '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +7 (999) 777-45-45.',
                    '',
                    profile.email
                        ? `–¢–∞–∫–∂–µ –º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ${profile.email} ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∏—Å—å–º–æ.`
                        : '–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ—á—Ç—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–∏—Å–∞—Ç—å –≤–∞–º –Ω–∞ e-mail.',
                    '',
                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?',
                ]
                    .filter(Boolean)
                    .join('\n'),
            };
        },
        validate: (value) =>
            typeof value === 'string' &&
            [BUTTONS.mainMenu, BUTTONS.viewCatalog].includes(value.trim()),
        next: (context) => {
            const answer = String(context.session?.support ?? '').trim();
            if (answer === BUTTONS.viewCatalog) {
                return 'catalog-categories';
            }

            return 'main-menu';
        },
        middlewares: ['require-registration'],
    },
    {
        id: 'reset-confirm',
        content:
            '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–æ—Ä–∑–∏–Ω—É.',
        validate: (value) =>
            typeof value === 'string' &&
            [BUTTONS.confirmReset, BUTTONS.cancelReset].includes(value.trim()),
        onValid: (context) => {
            const session = ensureSession(context);
            const answer = String(
                context.session?.['reset-confirm'] ?? '',
            ).trim();

            if (answer === BUTTONS.confirmReset) {
                session.profile = {};
                session.registration = { completed: false };
                session.cart = [];

                delete session['first-name'];
                delete session['last-name'];
                delete session.email;
                delete session.phone;
                delete session.address;
                delete session['registration-summary'];
                delete session['main-menu'];
            }
        },
        next: (context) => {
            const answer = String(
                context.session?.['reset-confirm'] ?? '',
            ).trim();
            if (answer === BUTTONS.confirmReset) {
                return 'first-name';
            }

            return 'main-menu';
        },
        middlewares: ['require-registration'],
    },
];

const buildProductPage = (productId: string): IBotPage => ({
    id: `product-${productId}`,
    content: () => {
        const product = catalogService.getProduct(productId);
        if (!product) {
            return {
                text: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            };
        }

        return {
            text: catalogService.formatProductCard(product),
            options: { parse_mode: 'Markdown' },
        };
    },
    validate: (value) =>
        typeof value === 'string' &&
        [
            BUTTONS.addToCart,
            BUTTONS.backToCategory,
            BUTTONS.backToCategories,
            BUTTONS.mainMenu,
            BUTTONS.openCart,
        ].includes(value.trim()),
    onValid: (context) => {
        const session = ensureSession(context);
        const answer = String(
            context.session?.[`product-${productId}`] ?? '',
        ).trim();

        if (answer === BUTTONS.addToCart) {
            session.cart = session.cart ?? [];
            session.cart.push(productId);
            context.bot.sendMessage(
                context.chatId,
                '–î–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.',
            );
        }
    },
    next: (context) => {
        const answer = String(
            context.session?.[`product-${productId}`] ?? '',
        ).trim();
        if (answer === BUTTONS.addToCart) {
            return 'cart-overview';
        }

        if (answer === BUTTONS.backToCategory) {
            const product = catalogService.getProduct(productId);
            return product
                ? `catalog-${product.categoryId}`
                : 'catalog-categories';
        }

        if (answer === BUTTONS.backToCategories) {
            return 'catalog-categories';
        }

        if (answer === BUTTONS.openCart) {
            return 'cart-overview';
        }

        return 'main-menu';
    },
    middlewares: ['require-registration'],
});

const productPages: IBotPage[] = catalogService
    .listCategories()
    .flatMap((category) =>
        catalogService
            .listProductsByCategory(category.id)
            .map((product) => buildProductPage(product.id)),
    );

const keyboards = [
    {
        id: 'phone',
        resolve: () => ({
            keyboard: [
                [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }),
    },
    {
        id: 'registration-summary',
        resolve: () => ({
            keyboard: [
                [{ text: BUTTONS.openCatalog }],
                [{ text: BUTTONS.editProfile }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
        }),
    },
    {
        id: 'catalog-categories',
        resolve: () => {
            const categories = catalogService.listCategories();
            const buttons = categories.map((category) => [
                { text: category.title },
            ]);
            buttons.push([{ text: BUTTONS.mainMenu }]);

            return {
                keyboard: buttons,
                resize_keyboard: true,
            };
        },
    },
    {
        id: 'catalog-tea',
        resolve: () => {
            const products = catalogService.listProductsByCategory('tea');
            const buttons = products.map((product) => [
                { text: product.title },
            ]);
            buttons.push([{ text: BUTTONS.backToCategories }]);
            buttons.push([{ text: BUTTONS.mainMenu }]);

            return {
                keyboard: buttons,
                resize_keyboard: true,
            };
        },
    },
    {
        id: 'catalog-dessert',
        resolve: () => {
            const products = catalogService.listProductsByCategory('dessert');
            const buttons = products.map((product) => [
                { text: product.title },
            ]);
            buttons.push([{ text: BUTTONS.backToCategories }]);
            buttons.push([{ text: BUTTONS.mainMenu }]);

            return {
                keyboard: buttons,
                resize_keyboard: true,
            };
        },
    },
    ...catalogService.listCategories().flatMap((category) =>
        catalogService.listProductsByCategory(category.id).map((product) => ({
            id: `product-${product.id}`,
            resolve: () => ({
                keyboard: [
                    [{ text: BUTTONS.addToCart }],
                    [
                        { text: BUTTONS.backToCategory },
                        { text: BUTTONS.backToCategories },
                    ],
                    [{ text: BUTTONS.openCart }, { text: BUTTONS.mainMenu }],
                ],
                resize_keyboard: true,
            }),
        })),
    ),
    {
        id: 'cart-overview',
        resolve: (context: IBotBuilderContext) => {
            const session = ensureSession(context);
            const cartIsEmpty = !session.cart || session.cart.length === 0;
            const keyboard = [[{ text: BUTTONS.mainMenu }]];

            if (!cartIsEmpty) {
                keyboard.unshift([{ text: BUTTONS.checkout }]);
                keyboard.splice(1, 0, [{ text: BUTTONS.clearCart }]);
            }

            return {
                keyboard,
                resize_keyboard: true,
            };
        },
    },
    {
        id: 'order-confirmation',
        resolve: () => ({
            keyboard: [
                [{ text: BUTTONS.viewCatalog }],
                [{ text: BUTTONS.mainMenu }],
            ],
            resize_keyboard: true,
        }),
    },
    {
        id: 'profile-overview',
        resolve: () => ({
            keyboard: [
                [{ text: BUTTONS.editProfile }],
                [{ text: BUTTONS.mainMenu }, { text: BUTTONS.reset }],
            ],
            resize_keyboard: true,
        }),
    },
    {
        id: 'address-update',
        resolve: () => ({
            keyboard: [[{ text: BUTTONS.mainMenu }]],
            resize_keyboard: true,
            one_time_keyboard: true,
        }),
    },
    {
        id: 'support',
        resolve: () => ({
            keyboard: [
                [{ text: BUTTONS.viewCatalog }],
                [{ text: BUTTONS.mainMenu }],
            ],
            resize_keyboard: true,
        }),
    },
    {
        id: 'reset-confirm',
        resolve: () => ({
            keyboard: [
                [{ text: BUTTONS.confirmReset }],
                [{ text: BUTTONS.cancelReset }],
            ],
            resize_keyboard: true,
        }),
    },
    {
        id: 'main-navigation',
        persistent: true,
        resolve: (context: IBotBuilderContext) => {
            const session = context.session as IUrbanMarketSession | undefined;
            if (!isRegistrationCompleted(session)) {
                return undefined;
            }

            return {
                keyboard: [
                    [{ text: BUTTONS.viewCatalog }, { text: BUTTONS.viewCart }],
                    [{ text: BUTTONS.viewProfile }, { text: BUTTONS.support }],
                    [{ text: BUTTONS.reset }],
                ],
                resize_keyboard: true,
            };
        },
    },
];

export const createUrbanMarketBot = (
    token: string,
    overrides: Partial<IBotBuilderOptions> = {},
): IBotBuilderOptions => ({
    TG_BOT_TOKEN: token,
    id: overrides.id ?? 'urban-market-dev',
    slug: overrides.slug ?? 'urban-market-dev',
    initialPageId: overrides.initialPageId ?? 'first-name',
    services: {
        catalog: catalogService,
        ...(overrides.services ?? {}),
    },
    pageMiddlewares: [requireRegistrationMiddleware],
    pages: [...registrationPages, ...catalogPages, ...productPages],
    keyboards,
    ...overrides,
});

export type { IUrbanMarketSession, UrbanMarketCatalogService };
